% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/get-macroregion.R, R/macroregion.R
\name{get_centers.macroregion}
\alias{get_centers.macroregion}
\alias{get_regions.macroregion}
\alias{get_all_region.macroregion}
\alias{get_state.macroregion}
\alias{get_p_accept.macroregion}
\alias{get_offered.macroregion}
\alias{get_initial_strip.macroregion}
\alias{get_current_strip.macroregion}
\alias{get_time.macroregion}
\alias{macroregion}
\alias{print.macroregion}
\title{Constructor for object of class \code{macroregion}}
\usage{
\method{get_centers}{macroregion}(x, ...)

\method{get_regions}{macroregion}(x, ...)

\method{get_all_region}{macroregion}(x, ...)

\method{get_state}{macroregion}(x, ...)

\method{get_p_accept}{macroregion}(x, ...)

\method{get_offered}{macroregion}(x, ...)

\method{get_initial_strip}{macroregion}(x, ...)

\method{get_current_strip}{macroregion}(x, ...)

\method{get_time}{macroregion}(x, ...)

macroregion(name, regions, initial_strip = purrr::map_chr(regions, "region"))

\method{print}{macroregion}(x, ...)
}
\arguments{
\item{x}{an object used to select a method.}

\item{...}{further arguments passed to or from other methods.}

\item{name}{[chr] the name of the macroregion}

\item{regions}{[lst] a list of objects of class \code{\link{regions}},
passed by \code{\link{set_regions}()}. Note: all the region in a
macroregion must be of the same state.}

\item{initial_strip}{[chr] e sequence of \code{\link{region}}s' names in the
\code{\link{macroregion}} representing the order in which organs
started to be distributed in the \code{\link{macroregion}} at the
beginning of the period. All the listed \code{\link{region}}s have
to be included also in the \code{regions} field. Repetition are
admitted as well as exculsions.}
}
\value{
An object of class \code{\link{macroregion}}.
}
\description{
The function \code{\link{macroregion}()} is the constructor function for
the homonymous class.
}
\section{Methods (by generic)}{
\itemize{
\item \code{get_centers}: function to access to all the centers in a
macroregion.

\item \code{get_regions}: wrapper function to access to the detail
"regions".

\item \code{get_all_region}: wrapper function to access to the all the names
of regions appear in the detail "regions".

\item \code{get_state}: wrapper function to access to the name of the
state

\item \code{get_p_accept}: compute the probability that at least one center
in any region of the macroregion accept an offered organ.

\item \code{get_offered}: wrapper function to access to the detail
"offered".

\item \code{get_initial_strip}: wrapper function to access to the detail
"initial_strip".

\item \code{get_current_strip}: wrapper function to access to the detail
"current_strip".

\item \code{get_time}: wrapper function to access to the detail
"time_period".

\item \code{print}: nice (and coloured, if supported) print method.
}}

\note{
exclude a \code{\link{region}} from the \code{base_strip} is the
      same as include a \code{\link{region}} with zero
      \code{get_p_accept} parameter. Anyway, in such a case, it is
      always preferred to set \code{get_p_accept} to zero for those
      \code{\link{region}} (i.e. for all their \code{\link{center}}s) and
      also exclude them from the strip. Note also that if a region is
      included in a macroregion with a zero \code{get_p_accept} parameter
      and/or not in the strip, it will provide anyway its surplus organ
      with a priority for the \code{\link{macroregion}}.
}
\examples{
pavia   <- center('Pavia',   'Lombardia', offered = 5, p_accept = 0.6)
bergamo <- center('Bergamo', 'Lombardia', 8)
milano  <- center('Milano',  'Lombardia', 10, 0.8)
lombardia <- region(set_centers(pavia, bergamo, milano), default_p = 0.7)

padova <- center('Padova', 'Veneto', 8, 0.7)
veneto <- region(set_centers(padova))

nitp <- macroregion('NITp',
  regions = set_regions(lombardia, veneto),
  initial_strip = c('lombardia', 'lombardia', 'veneto')
)
get_centers(nitp)
get_regions(nitp)
get_all_region(nitp)
get_state(nitp) # "italy"
pavia   <- center('Pavia',   'Lombardia', offered = 5, p_accept = 0.6)
bergamo <- center('Bergamo', 'Lombardia', 8)
milano  <- center('Milano',  'Lombardia', 10, 0.8)
lombardia <- region(set_centers(pavia, bergamo, milano), default_p = 0.7)

padova <- center('Padova', 'Veneto', 8, 0.7)
veneto <- region(set_centers(padova))

nitp <- macroregion('NITp',
  regions = set_regions(lombardia, veneto),
  initial_strip = c('lombardia', 'lombardia', 'veneto')
)
get_p_accept(nitp)
get_offered(nitp)
get_initial_strip(nitp)
get_current_strip(nitp)
get_time(nitp)
pavia   <- center('Pavia',   'Lombardia', offered = 5, p_accept = 0.6)
bergamo <- center('Bergamo', 'Lombardia', 8)
milano  <- center('Milano',  'Lombardia', 10, 0.8)
lombardia <- region(set_centers(pavia, bergamo, milano), default_p = 0.7)

padova <- center('Padova', 'Veneto', 8, 0.7)
veneto <- region(set_centers(padova))

nitp <- macroregion('NITp',
  regions = set_regions(lombardia, veneto),
  initial_strip = c('lombardia', 'lombardia', 'veneto')
)
}
