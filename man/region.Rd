% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/gets.R, R/region.R
\name{get_p_accept.region}
\alias{get_p_accept.region}
\alias{get_offered.region}
\alias{get_p_default.region}
\alias{get_state.region}
\alias{get_centers.region}
\alias{region}
\alias{print.region}
\title{Constructor for object of class \code{region}}
\usage{
\method{get_p_accept}{region}(x, ...)

\method{get_offered}{region}(x, ...)

\method{get_p_default}{region}(x, ...)

\method{get_state}{region}(x, ...)

\method{get_centers}{region}(x, ...)

region(centers, default_p = 1)

\method{print}{region}(x, ...)
}
\arguments{
\item{x}{an object used to select a method.}

\item{...}{further arguments passed to or from other methods.}

\item{centers}{[lst] a list of objects of class \code{\link{center}},
passed by \code{\link{set_centers}}. Note: all the center in a
region must be of the same region and state.}

\item{default_p}{[dbl] a single number between 0 and 1 (possibly
included) representing the default probability for the centers in the
region (if not explicitelly specified in the \code{\link{center}}
properties) to accept an offered organ. Default is 1, which means that
if offered, an organ is always accepted.}
}
\value{
An object of class \code{\link{region}}.
}
\description{
The function \code{\link{region}()} is the constructor function for the
homonymous class.
}
\section{Methods (by generic)}{
\itemize{
\item \code{get_p_accept}: compute the probability that at least one center in
in the region accept an offered organ.

\item \code{get_offered}: wrapper function to access to the detail "offered".

\item \code{get_p_default}: wrapper function to access to the detail "default_p".

\item \code{get_state}: wrapper function to access to the detail "state".

\item \code{get_centers}: wrapper function to access to the detail "centers".

\item \code{print}: nice (and coloured, if supported) print method.
}}

\examples{
pavia   <- center('Pavia',   'Lombardia', 10, 0.8)
bergamo <- center('Bergamo', 'Lombardia', 10, 0.5)
milano  <- center('Milano',  'Lombardia', 10)

lombardia <- region(set_centers(pavia, bergamo, milano), default_p = 0.2)
get_p_accept(lombardia)
get_offered(lombardia)
get_p_default(lombardia)
get_state(lombardia) # italy
get_centers(lombardia)
pavia   <- center('Pavia',   'Lombardia', 10, 0.8)
bergamo <- center('Bergamo', 'Lombardia', 10, 0.5)
milano  <- center('Milano',  'Lombardia', 10)

lombardia <- region(set_centers(pavia, bergamo, milano), default_p = 0.2)

pavia
bergamo
milano

lombardia
}
